//给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。
//
//如果数组中不存在目标值 target，返回[-1, -1]。
//
//你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。
//
//
//
//示例 1：
//
//输入：nums = [5, 7, 7, 8, 8, 10], target = 8
//输出：[3, 4]
//示例 2：
//
//输入：nums = [5, 7, 7, 8, 8, 10], target = 6
//输出：[-1, -1]
//示例 3：
//
//输入：nums = [], target = 0
//输出：[-1, -1]
//
//
//提示：
//
//0 <= nums.length <= 105
//- 109 <= nums[i] <= 109
//nums 是一个非递减数组
//- 109 <= target <= 109
//Note: The returned array must be malloced, assume caller calls free().
#include<stdio.h>
#include<stdlib.h>
int* searchRange(int* nums, int numsSize, int target, int* returnSize) {
    int left = 0; int right = numsSize - 1; int mid; int count1 = 1; int count2 = 1; int* returnarr = (int*)malloc(sizeof(int) * 2);
    *returnSize = 2; int a = 0; int b = 0;
    while (left <= right)
    {
        mid = (right + left) / 2;
        if (nums[mid] < target)
        {
            left = left + 1;
        }
        else if (nums[mid] > target)
        {
            right = right - 1;
        }
        else
        {
            while (1)
            {
                if (mid + count1 <= numsSize - 1 && nums[mid + count1] == target)
                {
                    count1++;
                }
                else
                {
                    a = 1;
                }
                if (mid - count2 >= 0 && nums[mid - count2] == target)
                {
                    count2++;
                }
                else
                {
                    b = 1;
                }
                if (a == 1 && b == 1)
                {
                    break;
                }
            }
            returnarr[0] = mid - count2 + 1;
            returnarr[1] = mid + count1 - 1;
            return returnarr;
        }
    }
    returnarr[0] = -1;
    returnarr[1] = -1;
    return returnarr;
}